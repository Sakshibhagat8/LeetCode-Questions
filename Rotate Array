class Rotate_Array{
    static void Rotate(int arr[],int d,int n)
    {
        int temp[]=new int[n];
        int k=0;
        for(int i=d;i<n;i++)
        {
            temp[k]=arr[i];
            k++;
        }
        for(int i=0;i<d;i++)
        {
            temp[k]=arr[i];
            k++;
        }
        // Copying the elements of temp[] in arr[]
        for(int i=0;i<n;i++){
            arr[i]=temp[i];
        }
    }
    static void PrintTheArray(int arr[],int n)
    {
        for(int i=0;i<n;i++){
            System.out.print(arr[i]+" ");
        }
    }
    public static void main(String args[])
    {
        int arr[]={1,2,3,4,5,6,7};
        int n=arr.length;
        int d=2;
        Rotate(arr,d,n);
        PrintTheArray(arr,n);
    }
}
// Time complexity: O(N) 
Auxiliary Space: O(N)
//LeetCode Solution

public void rotate(int[] nums, int k) {
if(k > nums.length)
k=k%nums.length;
int[] result = new int[nums.length];
for(int i=0; i < k; i++){
result[i] = nums[nums.length-k+i];
}
int j=0;
for(int i=k; i<nums.length; i++){
result[i] = nums[j];
j++;
}
System.arraycopy( result, 0, nums, 0, nums.length );
}

